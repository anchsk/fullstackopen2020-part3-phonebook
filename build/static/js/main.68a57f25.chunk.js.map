{"version":3,"sources":["components/Filter.js","components/Persons.js","components/PersonForm.js","services/numbers.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","newSearch","handleSearchChange","value","onChange","Persons","personsToShow","remove","map","person","className","key","name","number","onClick","id","PersonForm","newName","handleNameChange","newNumber","handleNumberChange","addPerson","onSubmit","type","baseUrl","axios","get","then","response","data","newObject","post","console","log","delete","put","Notification","message","App","useState","persons","setPersons","setNewName","setNewNumber","setNewSearch","showFiltered","setShowFiltered","text","errorMessage","setErrorMessage","useEffect","contacts","catch","error","setTimeout","filter","toLowerCase","includes","event","target","preventDefault","newPerson","some","window","confirm","concat","personToDelete","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2NAUeA,EARA,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,mBAC1B,OACE,8CACgB,2BAAOC,MAAOF,EAAWG,SAAUF,MCSxCG,EAZC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,cAAeC,EAAa,EAAbA,OAChC,OACE,6BACGD,EAAcE,KAAI,SAACC,GAAD,OACjB,yBAAKC,UAAU,SAASC,IAAKF,EAAOG,MACjCH,EAAOG,KADV,IACiBH,EAAOI,OADxB,IACgC,4BAAQC,QAAS,kBAAIP,EAAOE,EAAOM,MAAnC,gBCWzBC,EAhBI,SAAC,GAA2E,IAA1EC,EAAyE,EAAzEA,QAASC,EAAgE,EAAhEA,iBAAkBC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,mBAAoBC,EAAe,EAAfA,UAC9E,OACC,0BAAMC,SAAUD,GACV,sCACQ,2BAAOlB,MAAOc,EAASb,SAAUc,KAEzC,wCACU,2BAAOf,MAAOgB,EAAWf,SAAUgB,KAE7C,6BACE,4BAAQG,KAAK,UAAb,U,gBCTJC,EAAU,eAsBD,EApBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAkB9B,EAfA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACd,GAEd,OADAiB,QAAQC,IAAI,mBACLR,IAAMS,OAAN,UAAgBV,EAAhB,YAA2BT,KAQrB,EALA,SAACA,EAAIe,GAElB,OADgBL,IAAMU,IAAN,UAAaX,EAAb,YAAwBT,GAAMe,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCZ9BO,EARM,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAAS3B,EAAgB,EAAhBA,UAC/B,OAAgB,OAAZ2B,EACK,KAGF,yBAAK3B,UAAWA,GAAY2B,ICwMtBC,EAxMH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEcF,mBAAS,IAFvB,mBAETtB,EAFS,KAEAyB,EAFA,OAGkBH,mBAAS,IAH3B,mBAGTpB,EAHS,KAGEwB,EAHF,OAIkBJ,mBAAS,IAJ3B,mBAITtC,EAJS,KAIE2C,EAJF,OAKwBL,oBAAS,GALjC,mBAKTM,EALS,KAKKC,EALL,OAMwBP,mBAAS,CAC/CQ,KAAM,KACNrC,UAAW,KARG,mBAMTsC,EANS,KAMKC,EANL,KAWhBC,qBAAU,WAGRC,IAEGxB,MAAK,SAACC,GAAD,OAAca,EAAWb,MAC9BwB,OAAM,SAACC,GACNJ,EAAgB,CACdF,KAAK,0CACLrC,UAAW,UAEb4C,YAAW,kBAAML,EAAgB,CAAEF,KAAM,SAAS,UAErD,IAEH,IAAMzC,EAAiBuC,EAEnBL,EAAQe,QAAO,SAAC9C,GAAD,OACbA,EAAOG,KAAK4C,cAAcC,SAASxD,EAAUuD,kBAF/ChB,EAgJJ,OACE,6BAME,yCACA,kBAAC,EAAD,CACEH,QAASW,EAAaD,KACtBrC,UAAWsC,EAAatC,YAE1B,uCACA,kBAAC,EAAD,CAAQT,UAAWA,EAAWC,mBAxJP,SAACwD,GAC1Bd,EAAac,EAAMC,OAAOxD,OAC1B2C,GAAgB,MAwJd,+CACA,kBAAC,EAAD,CACEzB,UAzIY,SAACqC,GACjBA,EAAME,iBAEN,IAAMC,EAAY,CAChBjD,KAAMK,EACNJ,OAAQM,GAqBRqB,EAAQsB,MACN,SAACrD,GAAD,OAAYA,EAAOG,KAAK4C,gBAAkBvC,EAAQuC,iBAMlDO,OAAOC,QAAP,UACK/C,EADL,4EAIAkC,EAEIX,EAAQe,QAAO,SAAC9C,GAAD,OAAYA,EAAOG,OAASiD,EAAUjD,QAAM,GAAGG,GAC9D8C,GAEDlC,MAAK,SAACC,GACLI,QAAQC,IAAI,aAAcL,GAC1BqB,EAAgB,CACdF,KAAK,GAAD,OAAK9B,EAAL,8BACJP,UAAW,YAEb4C,YAAW,kBAAML,EAAgB,CAAEF,KAAM,SAAS,KAElDN,EACED,EAAQhC,KAAI,SAACC,GAAD,OACVA,EAAOM,KAAOa,EAASb,GAAK8C,EAAYpD,SAI7C2C,OAAM,SAACC,GACNJ,EAAgB,CACdF,KAAK,GAAD,OAAKc,EAAUjD,KAAf,6CACJF,UAAW,UAEb4C,YAAW,kBAAML,EAAgB,CAAEF,KAAM,SAAS,KAClDN,EACED,EAAQe,QAAO,SAAC9C,GAAD,OAAYA,EAAOG,OAASiD,EAAUjD,YAK7DuC,EACUU,GACPlC,MAAK,SAACC,GACLI,QAAQC,IAAI,WAAYL,GACxBqB,EAAgB,CACdF,KAAK,sBAAD,OAAwBc,EAAUjD,MACtCF,UAAW,YAEb4C,YAAW,kBAAML,EAAgB,CAAEF,KAAM,SAAS,KAClDN,EAAWD,EAAQyB,OAAOrC,OAE3BwB,OAAM,SAACC,GACNJ,EAAgB,CACdF,KAAK,gBAAD,OAAkBc,EAAUjD,MAChCF,UAAW,UAEb4C,YAAW,kBAAML,EAAgB,CAAEF,KAAM,SAAS,QAGxDL,EAAW,IACXC,EAAa,KAkDT1B,QAASA,EACTC,iBAzJmB,SAACwC,GACxBhB,EAAWgB,EAAMC,OAAOxD,QAyJpBgB,UAAWA,EACXC,mBAvJqB,SAACsC,GAC1Bf,EAAae,EAAMC,OAAOxD,UAwJxB,wCACA,kBAAC,EAAD,CAASG,cAAeA,EAAeC,OArDxB,SAACQ,GAClB,IAAImD,EAAiB1B,EAAQe,QAAO,SAAC9C,GAAD,OAAYA,EAAOM,KAAOA,KAAI,GAEhEgD,OAAOC,QAAP,0CAAkDE,EAAetD,KAAjE,OAEAuC,EACUpC,GACPY,MAAK,SAACC,GACLqB,EAAgB,CACdF,KAAK,wBAAD,OAA0BmB,EAAetD,MAC7CF,UAAW,YAEb4C,YAAW,kBAAML,EAAgB,CAAEF,KAAM,SAAS,KAClDN,EAAWD,EAAQe,QAAO,SAAC9C,GAAD,OAAYA,EAAOM,KAAOA,SAErDqC,OAAM,SAACC,GACNJ,EAAgB,CACdF,KAAK,GAAD,OAAKmB,EAAetD,KAApB,6CACJF,UAAW,UAGb4C,YAAW,WACTL,EAAgB,CAAEF,KAAM,SACvB,KACHN,EAAWD,EAAQe,QAAO,SAAC9C,GAAD,OAAYA,EAAOM,KAAOA,cCjK1CoD,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEd5B,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMhB,c","file":"static/js/main.68a57f25.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Filter = ({newSearch, handleSearchChange}) => {\n  return (\n    <div>\n      find by name: <input value={newSearch} onChange={handleSearchChange} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\n\nconst Persons = ({ personsToShow, remove }) => {\n  return (\n    <div>\n      {personsToShow.map((person) => (\n        <div className=\"person\" key={person.name}>\n          {person.name} {person.number} <button onClick={()=>remove(person.id)}>delete</button>\n        </div> \n      ))}\n    </div>\n  );\n};\n\nexport default Persons;\n","import React from 'react'\n\nconst PersonForm = ({newName, handleNameChange, newNumber, handleNumberChange, addPerson}) => {\n return (\n  <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n )\n}\n\nexport default PersonForm","import axios from \"axios\";\n//const baseUrl = \"http://localhost:3001/persons\";\n//const baseUrl = \"http://localhost:3001/api/persons\"\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst remove = (id) => {\n  console.log(\"going to remove\");\n  return axios.delete(`${baseUrl}/${id}`);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, remove, update };\n","import React from \"react\";\n\nconst Notification = ({ message, className }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className={className}>{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport Filter from \"./components/Filter\";\nimport Persons from \"./components/Persons\";\nimport PersonForm from \"./components/PersonForm\";\nimport contacts from \"./services/numbers\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [newSearch, setNewSearch] = useState(\"\");\n  const [showFiltered, setShowFiltered] = useState(false);\n  const [errorMessage, setErrorMessage] = useState({\n    text: null,\n    className: \"\",\n  });\n\n  useEffect(() => {\n    // console.log(\"effect, getAll\");\n    // console.log(\"render start\", persons.length, \"persons\");\n    contacts\n      .getAll()\n      .then((response) => setPersons(response))\n      .catch((error) => {\n        setErrorMessage({\n          text: `Error: Couldn't connect to the database`,\n          className: \"error\",\n        });\n        setTimeout(() => setErrorMessage({ text: null }), 5000);\n      });\n  }, []);\n\n  const personsToShow = !showFiltered\n    ? persons\n    : persons.filter((person) =>\n        person.name.toLowerCase().includes(newSearch.toLowerCase())\n      );\n\n  const handleSearchChange = (event) => {\n    setNewSearch(event.target.value);\n    setShowFiltered(true);\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  /*const updatePerson = (id, number) => {\n\n\n\n  }*/\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n\n    /* This version checks if the persons exixts on server:\n\n   contacts.getAll().then((allPersonsOnServer) => {\n\n      if (allPersonsOnServer.some((person) => person.name.toLowerCase() === newName.toLowerCase())) {\n        alert(`${newName} is already added to phonebook`);\n      } else {\n        contacts.create(newPerson).then((response) => {\n          console.log(\"response\", response);\n          setPersons(persons.concat(response));\n        });\n      }\n      setNewName(\"\");\n      setNewNumber(\"\");\n    }) */\n\n    /* This verion checks among rendered items */\n    if (\n      persons.some(\n        (person) => person.name.toLowerCase() === newName.toLowerCase()\n      )\n    ) {\n      /*alert(`${newName} is already added to phonebook`);\n       */\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook. Replace the old number with a new one?`\n        )\n      ) {\n        contacts\n          .update(\n            persons.filter((person) => person.name === newPerson.name)[0].id,\n            newPerson\n          )\n          .then((response) => {\n            console.log(\"We updated\", response);\n            setErrorMessage({\n              text: `${newName} was successfully updated!`,\n              className: \"success\",\n            });\n            setTimeout(() => setErrorMessage({ text: null }), 5000);\n\n            setPersons(\n              persons.map((person) =>\n                person.id === response.id ? newPerson : person\n              )\n            );\n          })\n          .catch((error) => {\n            setErrorMessage({\n              text: `${newPerson.name} has already been removed from the server`,\n              className: \"error\",\n            });\n            setTimeout(() => setErrorMessage({ text: null }), 5000);\n            setPersons(\n              persons.filter((person) => person.name !== newPerson.name)\n            );\n          });\n      }\n    } else {\n      contacts\n        .create(newPerson)\n        .then((response) => {\n          console.log(\"response\", response);\n          setErrorMessage({\n            text: `Successfully added ${newPerson.name}`,\n            className: \"success\",\n          });\n          setTimeout(() => setErrorMessage({ text: null }), 5000);\n          setPersons(persons.concat(response));\n        })\n        .catch((error) => {\n          setErrorMessage({\n            text: `Couldn't add ${newPerson.name}`,\n            className: \"error\",\n          });\n          setTimeout(() => setErrorMessage({ text: null }), 5000);\n        });\n    }\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  const removeItem = (id) => {\n    let personToDelete = persons.filter((person) => person.id === id)[0];\n    if (\n      window.confirm(`Are you sure you want to delete ${personToDelete.name}?`)\n    ) {\n      contacts\n        .remove(id) /* Then we need to update the personsToShow */\n        .then((response) => {\n          setErrorMessage({\n            text: `Successfully removed ${personToDelete.name}`,\n            className: \"success\",\n          });\n          setTimeout(() => setErrorMessage({ text: null }), 5000);\n          setPersons(persons.filter((person) => person.id !== id));\n        })\n        .catch((error) => {\n          setErrorMessage({\n            text: `${personToDelete.name} has already been removed from the server`,\n            className: \"error\",\n          });\n\n          setTimeout(() => {\n            setErrorMessage({ text: null });\n          }, 5000);\n          setPersons(persons.filter((person) => person.id !== id));\n        });\n    }\n  };\n\n  return (\n    <div>\n      {/* DEBUG */}\n      {/*<div style={{ backgroundColor: `pink`, position: `absolute`, top: `0` }}>\n        debug: {newName} {newSearch}\n      </div>*/}\n\n      <h1>Phonebook</h1>\n      <Notification\n        message={errorMessage.text}\n        className={errorMessage.className}\n      />\n      <h3>Search:</h3>\n      <Filter newSearch={newSearch} handleSearchChange={handleSearchChange} />\n\n      <h3>Add new person:</h3>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Contacts</h2>\n      <Persons personsToShow={personsToShow} remove={removeItem} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}